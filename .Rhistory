return(bin_choose(trials, success) * (prob ^ success) * ((1 - prob) ^ (trials - success)))
}
else{
stop("invalid trials value")
}
}
# probability of getting 2 success in 5 trials
# (assuming prob of success = 0.5)
bin_probability(2, 5, 0.5)
# probability of getting 2 or less successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(0:2, 5, 0.5)
vec <- c(1,2,3)
# 55 heads in 100 tosses of a loaded coin with 45% chance of heads
bin_probability(55, 100, 0.45)
#' @title Binomial Distribution
#' @description Given the number of trials and probability, find the binomial distribution
#' @param trials, number of trials of the distribution
#' @param prob, probability of succes for the binomial distribution
#' @return A data frame with the probability distribution: successes in the first column, probability in the second column
#' @export
#' @examples
#' bin_distribution(5, 0.2)
#' bin_distribution(7, 0.5)
bin_distribution <- function(trials, prob){
success_vec <- c(0:trials)
prob_vec <- bin_probability(success_vec, trials, prob)
df <- data.frame(success = success_vec, probability = prob_vec)
class(df) <- c("bindis", "data.frame")
return (df)
}
# binomial probability distribution
bin_distribution(5, 0.5)
#' @export
plot.bindis <- function(bin_object){
barplot(height = bin_object$probability, names.arg = bin_object$success, border = NA, xlab = "success", ylab = "probability")
}
# plotting binomial probability distribution
dis1 <- bin_distribution(5, 0.5)
plot(dis1)
#' @title Binomial Cumulative Distribution
#' @description Given the number of trials and the probability of success, calculate the binomial cumulative distribution
#' @param trials, number of trails of the binomial distribution
#' @param prob, probability of success of the binomial distribution
#' @return A data frame with both the probability distribution and the cumulative probabilities: successes in the first column, probability in the second column, and cumulative in the thrid column
#' @export
#' @examples
#' bin_cumulative(9, 0.45)
#' bin_cumulative(12, 0.3)
bin_cumulative <- function(trials, prob){
success_vec <- c(0:trials)
prob_vec <- bin_probability(success_vec, trials, prob)
cum_vec <- c()
for (i in 1:length(prob_vec)){
if (i == 1){
cum_vec <- c(cum_vec, prob_vec[i])
}
else{
cum_vec <- c(cum_vec, cum_vec[i - 1] + prob_vec[i])
}
}
df <- data.frame(success = success_vec, probability = prob_vec, cumulative = cum_vec)
class(df) <- c("bincum", "data.frame")
return (df)
}
#binomial cumulative distribution
bin_cumulative(5, 0.5)
#' @export
plot.bincum <- function(bincum_object){
plot(bincum_object$cumulative, xlab = "success", ylab = "probability")
lines(bincum_object$cumulative)
}
dis2 <- bin_cumulative(5, 0.5)
plot(dis2)
#' @title Binomial Variable
#' @description This funciton creates a binomial variable object
#' @param trials, number of trials of the binomial distribution
#' @param prob, probability of success of the binomial distribution
#' @return An object of class "binvar"
#' @export
#' @examples
#' bin_variable(6, 0.5)
#' bin_variable(20, 0.5)
bin_variable <- function(trials, prob){
if(check_trials(trials) & check_prob(prob)){
binvar_object <- list(trials = trials, prob = prob)
class(binvar_object) <- "binvar"
return (binvar_object)
}
else{
stop("invalid entry of trials, prob")
}
}
#' @export
print.binvar <- function(binvar_object){
cat('"Binomial variable"\n')
cat("\n")
cat("- number of trials:", binvar_object$trials, "\n")
cat("- prob of success:", binvar_object$prob)
}
bin1 <- bin_variable(10, 0.3)
bin1
#' @export
summary.binvar <- function(binvar_object){
trials = binvar_object$trials
prob = binvar_object$prob
mean <- aux_mean(trials, prob)
variance <- aux_variance(trials, prob)
mode <- aux_mode(trials, prob)
skewness <- aux_skewness(trials, prob)
kurtosis <- aux_kurtosis(trials, prob)
sumbin_object <- list(trials = trials,
prob = prob,
mean = mean,
variance = variance,
mode = mode,
skewness = skewness,
kurtosis = kurtosis)
class(sumbin_object) <- "summary.binvar"
return (sumbin_object)
}
#' @export
print.summary.binvar <- function(sumbin_object){
cat('"Summary Binomial"\n')
cat("\n")
cat("Paramaters \n")
cat("- number of trials:", sumbin_object$trials, "\n")
cat("- prob of success:", sumbin_object$prob, "\n")
cat("\n")
cat("Measures \n")
cat("- mean    :", sumbin_object$mean, "\n")
cat("- variance:", sumbin_object$variance, "\n")
cat("- mode    :", sumbin_object$mode, "\n")
cat("- skewness:", sumbin_object$skewness, "\n")
cat("- kurtosis:", sumbin_object$kurtosis)
}
bin1 <- bin_variable(10, 0.3)
binsum1 <- summary(bin1)
binsum1
#' @title Binomial Mean
#' @description Calculate the mean for a binomial distribution
#' @param trials, number of trials of the binomial distribution
#' @param prob, probability of succes of the binomial distriburion
#' @return The binomial mean of given number of trials and probability of success
#' @export
#' @examples
#' bin_mean(12, 0.7)
#' bin_mean(5, 0.23)
bin_mean <- function(trials, prob){
if (check_trials(trials) & check_prob(prob)){
return (aux_mean(trials, prob))
}
}
#' @title Binomial Variance
#' @description Calculate the variance for a binomial distribution
#' @param trials, number of trials of the binomial distribution
#' @param prob, probability of succes of the binomial distriburion
#' @return The binomial variance of given number of trials and probability of success
#' @export
#' @examples
#' bin_variance(12, 0.7)
#' bin_variance(5, 0.23)
bin_variance <- function(trials, prob){
if (check_trials(trials) & check_prob(prob)){
return (aux_variance(trials, prob))
}
}
#' @title Binomial Mode
#' @description Calculate the mode for a binomial distribution
#' @param trials, number of trials of the binomial distribution
#' @param prob, probability of succes of the binomial distriburion
#' @return The binomial mode of given number of trials and probability of success
#' @export
#' @examples
#' bin_mode(12, 0.7)
#' bin_mode(5, 0.23)
bin_mode <- function(trials, prob){
if (check_trials(trials) & check_prob(prob)){
return (aux_mode(trials, prob))
}
}
#' @title Binomial Skewness
#' @description Calculate the skewness for a binomial distribution
#' @param trials, number of trials of the binomial distribution
#' @param prob, probability of succes of the binomial distriburion
#' @return The binomial skewness of given number of trials and probability of success
#' @export
#' @examples
#' bin_skewness(12, 0.7)
#' bin_skewness(5, 0.23)
bin_skewness <- function(trials, prob){
if (check_trials(trials) & check_prob(prob)){
return (aux_skewness(trials, prob))
}
}
#' @title Binomial Kurtosis
#' @description Calculate the kurtosis for a binomial distribution
#' @param trials, number of trials of the binomial distribution
#' @param prob, probability of succes of the binomial distriburion
#' @return The binomial kurtosis of given number of trials and probability of success
#' @export
#' @examples
#' bin_kurtosis(12, 0.7)
#' bin_kurtosis(5, 0.23)
bin_kurtosis <- function(trials, prob){
if (check_trials(trials) & check_prob(prob)){
return (aux_kurtosis(trials, prob))
}
}
bin_mean(10, 0.3)
bin_variance(10, 0.3)
bin_mode(10, 0.3)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
aux_mean(-10, 0.5)
aux_skewness(14, 0.2)
aux_skewness(5, 0.5)
aux_skewness(20, 0.25)
aux_skewness(10, 0.3)
aux_skewness(10, 0.3)
aux_kurtosis(10, 0.3)
aux_kurtosis(39, 0.75)
aux_kurtosis(5, 0.12)
choose(-5, -6)
devtools::load_all(".")
pbinom(3,10,0.5)
qbinom(3,10,0.5)
dbinom(3,10,0.5)
dbinom(54,248,0.847)
dbinom(54,60,0.847)
dbinom(100,101,0.3478)
devtools::document()
devtools::document()
devtools::document()
package::object
bionomial::object
export(check_prob
export(check_prob)
export(bin_choose)
import(bin_choose)
?
bin_choose
devtools::use_vignette()
devtools::use_vignette()
devtools::use_vignette("introduction")
devtools::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
getwd()
claims <- read.csv("General_Analytics_Claims.csv")
head(claims)
#claim_freq <- table(claims$claim_date)
#head(claim_freq)
#claim_freq <- as.data.frame(claim_freq)
#head(claim_freq)
#claim_freq <- arrange(claim_freq, as.Date(Var1, format = "%m/%d/%Y"))
#head(claim_freq)
#ggplot(claims, aes(x = claim_date)) +
#  geom_histogram(stat = "count")
dates <- unique(claims$claim_date)
length(dates)
head(dates)
length(dates)
severity <- c(rep(0, 2475))
severity_vs_time <- data.frame(severity = severity, time = dates)
for (i in 1:length(dates)) {
temp <- sum(claims$claim_amount[claims$claim_date == dates[i]])
date_count <- length(claims$claim_date[claims$claim_date == dates[i]])
claim_severity <- temp / date_count
severity_vs_time$severity[i] <- claim_severity
}
head(severity_vs_time)
severity_vs_time <-  arrange(severity_vs_time, as.Date(time, format = "%m/%d/%Y"))
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(plyr)
getwd()
claims <- read.csv("General_Analytics_Claims.csv")
head(claims)
#claim_freq <- table(claims$claim_date)
#head(claim_freq)
#claim_freq <- as.data.frame(claim_freq)
#head(claim_freq)
#claim_freq <- arrange(claim_freq, as.Date(Var1, format = "%m/%d/%Y"))
#head(claim_freq)
#ggplot(claims, aes(x = claim_date)) +
#  geom_histogram(stat = "count")
dates <- unique(claims$claim_date)
length(dates)
head(dates)
length(dates)
severity <- c(rep(0, 2475))
severity_vs_time <- data.frame(severity = severity, time = dates)
for (i in 1:length(dates)) {
temp <- sum(claims$claim_amount[claims$claim_date == dates[i]])
date_count <- length(claims$claim_date[claims$claim_date == dates[i]])
claim_severity <- temp / date_count
severity_vs_time$severity[i] <- claim_severity
}
head(severity_vs_time)
severity_vs_time <-  arrange(severity_vs_time, as.Date(time, format = "%m/%d/%Y"))
head(severity_vs_time)
severity_vs_time$time <- as.Date(mdy(severity_vs_time$time))
head(severity_vs_time)
quan <- seq(0.05, .95, by = 0.05)
severity_vs_time %>% ggplot(aes(x = time, y = severity, group = 1)) +
geom_point() +
geom_quantile(quantiles = quan) +
ggtitle('Time vs. Claim Severity Plot') +
theme(plot.title = element_text(hjust = 0.5)) +
xlab('Time') +
ylab('Claim Secerity')
#claims %>% ggplot(aes(x = claim_date)) +
#  geom_histogram(stat = "count")q
ggsave('~/plot.png')
gwd()
getwd()
quan <- seq(0.05, .95, by = 0.05)
severity_vs_time %>% ggplot(aes(x = time, y = severity, group = 1)) +
geom_point() +
geom_quantile(quantiles = quan) +
ggtitle('Time vs. Claim Severity Plot') +
theme(plot.title = element_text(hjust = 0.5)) +
xlab('Time') +
ylab('Claim Secerity')
ggsave('~/plot.png')
getwd()
claims <- read.csv("General_Analytics_Claims.csv")
head(claims)
#claim_freq <- table(claims$claim_date)
#head(claim_freq)
#claim_freq <- as.data.frame(claim_freq)
#head(claim_freq)
#claim_freq <- arrange(claim_freq, as.Date(Var1, format = "%m/%d/%Y"))
#head(claim_freq)
#ggplot(claims, aes(x = claim_date)) +
#  geom_histogram(stat = "count")
dates <- unique(claims$claim_date)
length(dates)
head(dates)
length(dates)
severity <- c(rep(0, 2475))
severity_vs_time <- data.frame(severity = severity, time = dates)
for (i in 1:length(dates)) {
temp <- sum(claims$claim_amount[claims$claim_date == dates[i]])
date_count <- length(claims$claim_date[claims$claim_date == dates[i]])
claim_severity <- temp / date_count
severity_vs_time$severity[i] <- claim_severity
}
head(severity_vs_time)
severity_vs_time <-  arrange(severity_vs_time, as.Date(time, format = "%m/%d/%Y"))
head(severity_vs_time)
severity_vs_time$time <- as.Date(mdy(severity_vs_time$time))
head(severity_vs_time)
quan <- seq(0.05, .95, by = 0.05)
severity_vs_time %>% ggplot(aes(x = time, y = severity, group = 1)) +
geom_point() +
geom_quantile(quantiles = quan) +
ggtitle('Time vs. Claim Severity Plot') +
theme(plot.title = element_text(hjust = 0.5)) +
xlab('Time') +
ylab('Claim Secerity')
ggsave('plot.png')
#claims %>% ggplot(aes(x = claim_date)) +
#  geom_histogram(stat = "count")q
claims %>% ggplot(aes(x = claim_date)) +
geom_histogram(stat = "count")
claims %>% ggplot(aes(x = claim_date)) +
geom_histogram(stat = "count", binwidth = 100)
barplot(height = severity_vs_time$severity)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram()
severity_vs_time %>% ggplot(aes(x = time)) + geom_histogram()
(severity_vs_time)
claims %>% ggplot(aes(x = claim_date)) + geom_histogram()
claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count")
claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
?geom_smooth()
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() + geom_smooth(method = "gam")
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() + stat_smooth(method = "gam")
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() + stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() + stat_smooth(method = "gam", formula = y ~ s("count", bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram(stat = "count") + stat_smooth(method = "gam", formula = y ~ s("count", bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram(stat = "count") #+ stat_smooth(method = "gam", formula = y ~ s("count", bs = "cs"))
getwd()
claims <- read.csv("General_Analytics_Claims.csv")
head(claims)
dates <- unique(claims$claim_date)
length(dates)
head(dates)
length(dates)
severity <- c(rep(0, 2475))
severity_vs_time <- data.frame(severity = severity, time = dates)
for (i in 1:length(dates)) {
temp <- sum(claims$claim_amount[claims$claim_date == dates[i]])
date_count <- length(claims$claim_date[claims$claim_date == dates[i]])
claim_severity <- temp / date_count
severity_vs_time$severity[i] <- claim_severity
}
head(severity_vs_time)
severity_vs_time <-  arrange(severity_vs_time, as.Date(time, format = "%m/%d/%Y"))
head(severity_vs_time)
severity_vs_time$time <- as.Date(mdy(severity_vs_time$time))
head(severity_vs_time)
quan <- seq(0.05, .95, by = 0.05)
severity_vs_time %>% ggplot(aes(x = time, y = severity, group = 1)) +
geom_point() +
geom_quantile(quantiles = quan) +
ggtitle('Time vs. Claim Severity Plot') +
theme(plot.title = element_text(hjust = 0.5)) +
xlab('Time') +
ylab('Claim Secerity')
ggsave('plot.png')
barplot(height = severity_vs_time$severity)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() #+ stat_smooth(method = "gam", formula = y ~ s("count", bs = "cs"))
severity_vs_time %>% ggplot(aes(x = time, y = severity, group = 1)) +
geom_point() +
geom_quantile(quantiles = quan) +
ggtitle('Time vs. Claim Severity Plot') +
theme(plot.title = element_text(hjust = 0.5)) +
xlab('Time') +
ylab('Claim Secerity') +
stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() + geom_line(aes(x = severity, y = dgamma(severity,fit.params$estimate["shape"], fit.params$estimate["rate"])), color="red", size = 1)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() #+ stat_smooth(method = "gam", formula = y ~ s("count", bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity)) + geom_histogram() + stat_smooth(method = "gam", formula = count ~ s(x, bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) + geom_histogram() + stat_smooth(method = "gam", formula = count ~ s(x, bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) + geom_histogram() #+ stat_smooth(method = "gam", formula = count ~ s(x, bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) + geom_histogram() + stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) + geom_histogram() + stat_smooth(method = "gam", formula = y ~ x)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) +
geom_histogram() +
stat_smooth(method = "gam", formula = y ~ s(x, k = 100, bs = "cs"))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) +
geom_histogram() +
stat_smooth(method = "gam", formula = y ~ s(x, k = 100))
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) +
geom_histogram() +
stat_smooth(method = "gam", formula = y ~ s(x))
severity_vs_time %>% ggplot(aes(x = time, y = severity, group = 1)) +
geom_point() +
geom_quantile(quantiles = quan) +
ggtitle('Time vs. Claim Severity Plot') +
theme(plot.title = element_text(hjust = 0.5)) +
xlab('Time') +
ylab('Claim Secerity') +
stat_smooth(method = "gam", formula = y ~ s(x, bs = "cs"))
severity_vs_time %>% ggplot(aes(x = time, y = severity, group = 1)) +
geom_point() +
geom_quantile(quantiles = quan) +
ggtitle('Time vs. Claim Severity Plot') +
theme(plot.title = element_text(hjust = 0.5)) +
xlab('Time') +
ylab('Claim Secerity') +
stat_smooth(method = "gam", formula = y ~ x)
hist(severity_vs_time$severity)
install.packages("fitdistrplus")
library(fitdistrplus)
plotdist(severity_vs_time$severity, histo = TRUE, demp = TRUE)
fit <- fitdist(severity_vs_time$severity, "gamma", method="mme")
plot(fit)
barplot(height = severity_vs_time$severity)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) +
geom_histogram() +
stat_smooth(method = "gam", formula = y ~ s(x))
barplot(height = severity_vs_time$severity)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) + geom_histogram()
fit <- fitdist(severity_vs_time$severity, "gamma", method="mme")
plot(fit)
#barplot(height = severity_vs_time$severity)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) + geom_histogram()
fit <- fitdist(severity_vs_time$severity, "gamma", method="mme")
plot(fit)
#barplot(height = severity_vs_time$severity)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..count..)) + geom_histogram()
ggsave('gamma.png')
fit <- fitdist(severity_vs_time$severity, "gamma", method="mme")
plot(fit)
#barplot(height = severity_vs_time$severity)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..density..)) + geom_histogram()
ggsave('gamma.png')
fit <- fitdist(severity_vs_time$severity, "gamma", method="mme")
plot(fit)
#barplot(height = severity_vs_time$severity)
#claims %>% ggplot(aes(x = claim_date)) + geom_histogram(stat = "count", bins = 100)
severity_vs_time %>% ggplot(aes(x = severity, y = ..density..)) + geom_histogram()
ggsave('gamma.png')
fit <- fitdist(severity_vs_time$severity, "gamma", method="mme")
plot(fit)
